name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  REDIS_PORT: ${{ secrets.REDIS_PORT }}
  EMAIL_PROVIDER: ${{ secrets.EMAIL_PROVIDER }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy-production:
    name: Deploy Arena Production
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0 # Fixed indentation
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Create SSH Tunnel
        run: |
          ssh -o StrictHostKeyChecking=no -L "$DB_PORT":"$DB_HOST":"$DB_PORT" ${{ secrets.SERVER_SSH_USER }}@${{ secrets.SERVER_HOST_NAME }}

      - name: Sync Database Schema
        run: |
          bun run db:generate
          bun run db:migrate

      - name: Build App
        run: bun --bun run build

      - name: Package Artifacts
        run: |
          cp -r .next/standalone ./build
          cp -r .next/static ./build/.next/static

          cd build
          cat <<EOF > app.env
          DB_NAME=$DB_NAME
          DB_HOST=$DB_HOST
          DB_PORT=$DB_PORT
          DB_USER=$DB_USER
          DB_PASS=$DB_PASS
          REDIS_HOST=$REDIS_HOST
          REDIS_PORT=$REDIS_PORT
          EMAIL_PROVIDER=$EMAIL_PROVIDER
          AWS_REGION=$AWS_REGION
          EOF
          cd ..

          tar czf build.tar.gz ./build

      - name: Deploy To Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST_NAME }}
          username: ${{ secrets.SERVER_SSH_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          source: "./build.tar.gz"
          target: "~/app/tmp"

      - name: Startup New Deployment
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST_NAME }}
          username: ${{ secrets.SERVER_SSH_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            echo "Setting up script"
            APP_DIR="~/app"
            DEFAULT_ACTIVE_DEPLOYMENT=green
            DEFAULT_INACTIVE_DEPLOYMENT=blue

            cd $APP_DIR

            echo "Determining active deployment"
            if [[ "$ACTIVE_DEPLOYMENT" == blue ]]; then
              export ACTIVE_DEPLOYMENT=green
              export INACTIVE_DEPLOYMENT=blue
            elif [[ "$ACTIVE_DEPLOYMENT" == green ]]; then
              export ACTIVE_DEPLOYMENT=blue
              export INACTIVE_DEPLOYMENT=green
            else
              export ACTIVE_DEPLOYMENT=$DEFAULT_ACTIVE_DEPLOYMENT
              export INACTIVE_DEPLOYMENT=$DEFAULT_INACTIVE_DEPLOYMENT
            fi
            echo "Deploying to new environment: $ACTIVE_DEPLOYMENT"

            echo "Unarchiving new app build"
            tar -xzf tmp/build.tar.gz -C tmp/build && rm -f tmp/build.tar.gz
            rsync -a --delete tmp/build/ "$ACTIVE_DEPLOYMENT/"
            rm -rf tmp/build

            echo "Setting up environment"
            set -a
            source "$ACTIVE_DEPLOYMENT/app.env"
            source shared/deployment.env
            set +a

            echo "Starting new app"
            cd "$APP_DIR/$ACTIVE_DEPLOYMENT" 
            pm2 start bun --name "arena-app-$ACTIVE_DEPLOYMENT" -- start

            echo "Waiting for the app to start"
            while ! nc -z localhost 3000; do   
              sleep 0.5
            done

            echo "Updating proxy upstream and reloading"
            cd "$APP_DIR/shared"
            envsubst < nginx.conf.template > arena.conf
            sudo ln -sf arena.conf /etc/nginx/arena.conf
            sudo nginx -t
            sudo nginx -s reload

            echo "Cleaning up"
            pm2 stop "arena-app-$INACTIVE_DEPLOYMENT"
            pm2 save

            echo "New Active Deployment: $ACTIVE_DEPLOYMENT"
